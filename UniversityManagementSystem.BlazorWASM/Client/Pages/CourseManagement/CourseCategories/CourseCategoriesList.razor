
@page "/CourseManagement/CourseCategoriesList"

@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject NotificationService _NotificationService
@inject HttpClient _httpClient

<PageTitle>Course Management</PageTitle>

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="" Text="Course Management" />
    <RadzenBreadCrumbItem Path="" Text="Courses List" />
    <RadzenBreadCrumbItem Path="" Text="Couse Categories List" />

</RadzenBreadCrumb>
<hr />
<br />



<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
    <RadzenButton Text="Add New Course Category"
                  Icon="add_circle_outline"
                  ButtonStyle="ButtonStyle.Success"
                  Shade="Shade.Dark"
                  Size="ButtonSize.Medium"
                  Click="CreateCourseDialogPopUp"
                  Variant="Variant.Outlined" />
</RadzenStack>
<hr />

<h3>Courses Categories List</h3>
<hr />

@if (CourseCategories is null)
{

    <CircularProgressLoader />
}
else
{
    <RadzenDataGrid TItem="CourseCategoryViewModel"
                    AllowFiltering="true"
                    ShowPagingSummary="true"
                    AllowColumnResize="true"
                    ColumnWidth="300px" AllowSorting="true" AllowPaging="true" PageSize="10"
                    Data="@CourseCategories">
        <Columns>
            <RadzenDataGridColumn TItem="CourseCategoryViewModel" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="CourseCategoryViewModel" Property="IsActive" Title="Active" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenCheckBox @bind-Value="data.IsActive"
                                    Disabled="true" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CourseCategoryViewModel" TextAlign="TextAlign.Left" Title="Actions">
                <Template Context="data">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                        <RadzenButton Text="Update" Icon="edit" Click="@(() => UpdateCourseCategoryDialogPopUp(data.Id))" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Warning" Style="width:100%" />
                        <RadzenButton Text="Delete" Icon="delete" Click="@(() => DeleteCourseCategory(data.Id))" IsBusy="@busy" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" Style="width:100%" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public IEnumerable<CourseCategoryViewModel>? CourseCategories { get; set; }

    private bool busy = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadCourseCategoriesData();
    }

    private async Task LoadCourseCategoriesData()
    {
        CourseCategories = null;

        var data = await _httpClient.GetStringAsync(FrontEndApiEndpointsConfig.CourseCategoryEndpoint);

        var result = JsonSerializer.Deserialize<BaseResponse<IEnumerable<CourseCategoryViewModel>>>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        if (result.Succeeded)
        {
            CourseCategories = result.ResponseData;
        }
        else if (result.Succeeded is false)
        {
            if (result.ExceptionError is not null)
            {
                ShowErrorNotificationMessage(result.Message, result.ExceptionError);
            }
            else
            {
                ShowErrorNotificationMessage(result.Message, string.Empty);

            }

            CourseCategories = new List<CourseCategoryViewModel>();
        }
    }


    private async Task CreateCourseDialogPopUp()
    {
        DialogOptions dialogOptions = new DialogOptions()
        {
            Width = "600px",
            Height = "500px",
            Resizable = true,
            Draggable = true
        };

        var result = await _dialogService.OpenAsync<CreateCourseCategory>("Create Course Category", null, dialogOptions);

        if (result is not null)
        {
            await LoadCourseCategoriesData();
        }
    }


    private async Task UpdateCourseCategoryDialogPopUp(int courseCategoryId)
    {
        DialogOptions dialogOptions = new DialogOptions()
        {
            Width = "600px",
            Height = "500px",
            Resizable = true,
            Draggable = true
        };

        var result = await _dialogService.OpenAsync<UpdateCourseCategory>("Update Course Category", new Dictionary<string, object>() { { "courseCategoryId", courseCategoryId } }, dialogOptions);

        if (result is not null)
        {
            await LoadCourseCategoriesData();
        }

    }

    private async Task DeleteCourseCategory(int courseId)
    {
        busy = true;
        var result = await _httpClient.DeleteAsync($"{FrontEndApiEndpointsConfig.CourseCategoryEndpoint}/{courseId}");
        if (result.IsSuccessStatusCode)
        {
            var data = await result.Content.ReadFromJsonAsync<BaseResponse<CourseViewModel>>();
            if (data.Succeeded)
            {
                busy = false;
                ShowSuccessMessage(data.Message);
                await LoadCourseCategoriesData();
            }
        }
    }

    void ShowErrorNotificationMessage(string ErrorMessage, string ExceptionErrorMessage)
    {
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Summary = $"{ErrorMessage}",
            Detail = ExceptionErrorMessage is null ? "" : ExceptionErrorMessage,
            Duration = 40000
        };
        _NotificationService.Notify(message);
    }

    void ShowSuccessMessage(string Message)
    {
        var message = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = $"Success",
            Detail = $"{Message}",
            Duration = 1000
        };
        _NotificationService.Notify(message);
    }

}
